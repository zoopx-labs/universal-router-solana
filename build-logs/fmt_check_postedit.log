Diff in /home/zoopx/zoopx/solana/programs/zpx_router/tests/finalize_auth.rs:4:
 use ::zpx_router as zpx_router_program;
 use anchor_lang::prelude::*;
 use solana_program_test::*;
[31m-use solana_sdk::{instruction, signature::Keypair, signer::Signer, transaction::Transaction, system_program};
(B[m[32m+use solana_sdk::{
(B[m[32m+    instruction, signature::Keypair, signer::Signer, system_program, transaction::Transaction,
(B[m[32m+};
(B[m 
 // Ignored heavy integration test that asserts finalize_message_v1 rejects unknown adapters
 #[tokio::test]
Diff in /home/zoopx/zoopx/solana/programs/zpx_router/tests/finalize_auth.rs:19:
         zpx_router_program::entry(program_id, accounts_coerced, input)
     }
 
[31m-    let mut program = ProgramTest::new("zpx_router", zpx_router_program::ID, processor!(entry_wrapper));
(B[m[32m+    let mut program = ProgramTest::new(
(B[m[32m+        "zpx_router",
(B[m[32m+        zpx_router_program::ID,
(B[m[32m+        processor!(entry_wrapper),
(B[m[32m+    );
(B[m     let mut ctx = program.start_with_context().await;
     let payer = &ctx.payer;
 
Diff in /home/zoopx/zoopx/solana/programs/zpx_router/tests/finalize_auth.rs:26:
     // init config with no adapters
[31m-    let (config_pda, _bump) = Pubkey::find_program_address(&[b"zpx_config"], &zpx_router_program::ID);
(B[m[32m+    let (config_pda, _bump) =
(B[m[32m+        Pubkey::find_program_address(&[b"zpx_config"], &zpx_router_program::ID);
(B[m     let init_accounts = zpx_router_program::accounts::InitializeConfig {
         payer: payer.pubkey(),
         config: config_pda,
Diff in /home/zoopx/zoopx/solana/programs/zpx_router/tests/finalize_auth.rs:31:
         system_program: system_program::id(),
     };
[31m-    let init_ix_data = anchor_lang::InstructionData::data(&zpx_router_program::instruction::InitializeConfig {
(B[m[31m-        admin: payer.pubkey(),
(B[m[31m-        fee_recipient: payer.pubkey(),
(B[m[31m-        src_chain_id: 1u64,
(B[m[31m-        relayer_fee_bps: 0u16,
(B[m[31m-    });
(B[m[32m+    let init_ix_data =
(B[m[32m+        anchor_lang::InstructionData::data(&zpx_router_program::instruction::InitializeConfig {
(B[m[32m+            admin: payer.pubkey(),
(B[m[32m+            fee_recipient: payer.pubkey(),
(B[m[32m+            src_chain_id: 1u64,
(B[m[32m+            relayer_fee_bps: 0u16,
(B[m[32m+        });
(B[m     let init_ix = instruction::Instruction {
         program_id: zpx_router_program::ID,
         accounts: init_accounts.to_account_metas(None),
Diff in /home/zoopx/zoopx/solana/programs/zpx_router/tests/finalize_auth.rs:42:
         data: init_ix_data,
     };
[31m-    let tx = Transaction::new_signed_with_payer(&[init_ix], Some(&payer.pubkey()), &[payer], ctx.last_blockhash);
(B[m[32m+    let tx = Transaction::new_signed_with_payer(
(B[m[32m+        &[init_ix],
(B[m[32m+        Some(&payer.pubkey()),
(B[m[32m+        &[payer],
(B[m[32m+        ctx.last_blockhash,
(B[m[32m+    );
(B[m     ctx.banks_client.process_transaction(tx).await.unwrap();
 
     // Build finalize call with an adapter that is NOT in the config adapters (should be rejected)
Diff in /home/zoopx/zoopx/solana/programs/zpx_router/tests/finalize_auth.rs:54:
     let asset_mint = Pubkey::new_unique();
     let initiator = Pubkey::new_unique();
 
[31m-    let (replay_pda, _rbump) = Pubkey::find_program_address(&[b"replay", &[0u8;32]], &zpx_router_program::ID);
(B[m[32m+    let (replay_pda, _rbump) =
(B[m[32m+        Pubkey::find_program_address(&[b"replay", &[0u8; 32]], &zpx_router_program::ID);
(B[m 
     let relayer = Keypair::new();
     // fund relayer
Diff in /home/zoopx/zoopx/solana/programs/zpx_router/tests/finalize_auth.rs:61:
     let rent = ctx.banks_client.get_rent().await.unwrap();
[31m-    let fund_ix = solana_sdk::system_instruction::transfer(&payer.pubkey(), &relayer.pubkey(), rent.minimum_balance(0) + 1_000_000);
(B[m[31m-    let tx2 = Transaction::new_signed_with_payer(&[fund_ix], Some(&payer.pubkey()), &[payer], ctx.last_blockhash);
(B[m[32m+    let fund_ix = solana_sdk::system_instruction::transfer(
(B[m[32m+        &payer.pubkey(),
(B[m[32m+        &relayer.pubkey(),
(B[m[32m+        rent.minimum_balance(0) + 1_000_000,
(B[m[32m+    );
(B[m[32m+    let tx2 = Transaction::new_signed_with_payer(
(B[m[32m+        &[fund_ix],
(B[m[32m+        Some(&payer.pubkey()),
(B[m[32m+        &[payer],
(B[m[32m+        ctx.last_blockhash,
(B[m[32m+    );
(B[m     ctx.banks_client.process_transaction(tx2).await.unwrap();
 
     let accounts = zpx_router_program::accounts::FinalizeMessageV1 {
Diff in /home/zoopx/zoopx/solana/programs/zpx_router/tests/finalize_auth.rs:69:
         replay: replay_pda,
         system_program: system_program::id(),
     };
[31m-    let ix_data = anchor_lang::InstructionData::data(&zpx_router_program::instruction::FinalizeMessageV1 {
(B[m[31m-        src_chain_id,
(B[m[31m-        dst_chain_id,
(B[m[31m-        forwarded_amount,
(B[m[31m-        nonce,
(B[m[31m-        payload_hash,
(B[m[31m-        src_adapter,
(B[m[31m-        asset_mint,
(B[m[31m-        _initiator: initiator,
(B[m[31m-    });
(B[m[31m-    let ix = instruction::Instruction { program_id: zpx_router_program::ID, accounts: accounts.to_account_metas(None), data: ix_data };
(B[m[31m-    let tx3 = Transaction::new_signed_with_payer(&[ix], Some(&payer.pubkey()), &[payer, &relayer], ctx.last_blockhash);
(B[m[32m+    let ix_data =
(B[m[32m+        anchor_lang::InstructionData::data(&zpx_router_program::instruction::FinalizeMessageV1 {
(B[m[32m+            src_chain_id,
(B[m[32m+            dst_chain_id,
(B[m[32m+            forwarded_amount,
(B[m[32m+            nonce,
(B[m[32m+            payload_hash,
(B[m[32m+            src_adapter,
(B[m[32m+            asset_mint,
(B[m[32m+            _initiator: initiator,
(B[m[32m+        });
(B[m[32m+    let ix = instruction::Instruction {
(B[m[32m+        program_id: zpx_router_program::ID,
(B[m[32m+        accounts: accounts.to_account_metas(None),
(B[m[32m+        data: ix_data,
(B[m[32m+    };
(B[m[32m+    let tx3 = Transaction::new_signed_with_payer(
(B[m[32m+        &[ix],
(B[m[32m+        Some(&payer.pubkey()),
(B[m[32m+        &[payer, &relayer],
(B[m[32m+        ctx.last_blockhash,
(B[m[32m+    );
(B[m     let res = ctx.banks_client.process_transaction(tx3).await;
     assert!(res.is_err(), "finalize should reject unknown adapter");
     Ok(())
FMT_EXIT:$?
